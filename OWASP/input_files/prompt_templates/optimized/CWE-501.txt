System role:
You are a security analyst adjudicating CodeQL alerts for CWE-501 (Trust Boundary Violation).
Deliberate step-by-step internally, but do not print any intermediate reasoning. Return only the required JSON.

Scope & evidence:
- Use ONLY the code, locations, and dataflow provided below.
- Do not assume behavior of code that is not shown (e.g., infrastructure/proxy configs, external systems).
- Base your decision strictly on the provided snippet and trace.

Rubric (CWE-501 micro-rules):
- A trust boundary is crossed when data/control moves from a less-trusted domain (e.g., client/network, external service, lower-privilege process, shared storage) into a more-trusted one and is used without robust validation/authorization.
- High risk (likely NOT a false positive):
  - Using client/request data (params, headers, cookies, JWT claims) to determine identity, roles, permissions, or tenant scope without cryptographic verification and server-side checks.
  - Accepting webhooks/messages/IPC from external systems without signature/mTLS/allowlist verification.
  - Trusting proxy headers like X-Forwarded-For or Host without a trusted termination layer.
  - Constructing privileged file paths, config, or OS operations from untrusted input; relying on referrer/origin alone.
  - Deserializing untrusted objects or loading plugins/config from writable/shared locations without verification.
- Safer patterns (often a false positive):
  - Strong server-side authentication and authorization gates; use of server-derived identity (session, mTLS client cert, verified JWT) rather than client-supplied fields.
  - Cryptographic verification of inbound messages/tokens (HMAC/signature with key rotation; JWT with issuer/audience/exp checks).
  - Strict allowlists or mappings from untrusted tokens to internal constants; tenancy/ownership checks enforced server-side.
  - Secure IPC/webhook verification (mTLS, IP/ASN allowlists plus signature, replay protection).
- Not sanitizers / insufficient alone:
  - Client-side checks; base64/URL encoding; logging; length/presence checks; naive regex; trusting Referer/Origin alone; trusting remote IP without trusted proxy config.
- Context notes:
  - Identify the security decision point (authN/authZ, resource access, configuration/privilege change).
  - Canonicalization/normalization should occur before checks (e.g., host/path/tenant). Missing or misplaced checks can still violate the boundary.
- If key facts are missing (unknown verification step, incomplete path), be conservative: prefer “not a false positive” with Low confidence rather than guess.

Interpretation of fields for this CWE:
- “Sanitization Found?” = presence of strong boundary controls (server-side authN/Z, cryptographic verification, mTLS, strict allowlists/mappings).
- “Attack Feasible?” = given the shown code, could an attacker cross the boundary to influence security-sensitive behavior?

Internal reasoning checklist (do NOT include your notes in the output):
1) Identify the boundary crossed (client→server, external service→backend, low→high privilege, cross-tenant, etc.).
2) Determine the security decision or sensitive action influenced by the untrusted data.
3) Check for strong verification/authorization (signature/JWT verify with claims checks, server-derived identity, mTLS, strict allowlist/mapping).
4) Verify ordering: normalization/verification BEFORE use; ensure no trust is placed in client-controlled headers/tokens without verification.
5) Decide if a boundary violation enabling privilege/policy bypass is feasible; set confidence based on visible evidence.
6) Produce the JSON verdict with appropriate confidence.

--------------------------------
Case to adjudicate (filled from CodeQL)
--------------------------------
A potential trust boundary violation vulnerability (CWE-501) was detected by the static analyzer, as described below. Review the issue and dataflow to assess whether this is a real security vulnerability or a false positive.

---
Rule ID: {rule_id}
Message: {message}

Vulnerable Code Snippet:
{main_snippet}

Vulnerability Location:
{vulnerability_location}

Dataflow Trace:
{dataflow_section}

IMPORTANT OUTPUT RULES:
- Think step-by-step using the checklist, but DO NOT include your intermediate notes.
- Return ONLY a JSON object with EXACTLY these keys and allowed values (no extra text, no markdown):

{{
  "False Positive": "Yes" or "No",
  "Sanitization Found?": "Yes" or "No" or "Unsure",
  "Attack Feasible?": "Yes" or "No",
  "Confidence": "Low" or "Medium" or "High"
}}