# Vulnerability: java/path-injection
## Message: This path depends on a [user-provided value](1).
This path depends on a [user-provided value](2).
This path depends on a [user-provided value](3).
This path depends on a [user-provided value](4).
This path depends on a [user-provided value](5).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 50, Column 31
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      45:         if (included) {
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
>>>   50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 80, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
      77:                 }
      78:             }
      79: 
>>>   80:             return (resource != null && resource.exists()) ? resource : null;
      81:         } catch (Exception e) {
      82:             if (LOG.isDebugEnabled()) {
      83:                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
      84:             }
      85:         }
```

### Data Flow Step 33: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 34: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 86, Column 58
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      81:                                                     HttpServletResponse httpResponse) throws IOException {
      82:         if (staticResourceHandlers != null) {
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
>>>   86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
      88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
```

### Data Flow Step 35: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 88, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
      86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
>>>   88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
      92:                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);
      93:                     wrappedOutputStream.flush();
```

### Data Flow Step 36: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 106, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     101:             return false;
     102:         }
     103:     }
     104: 
     105:     @Override
>>>  106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
```

### Data Flow Step 37: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 38: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 44, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      39:     /**
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
>>>   44:     public File getFile() throws IOException {
      45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 40: src/main/java/spark/resource/ExternalResource.java, Line 77, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      72:      *
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
>>>   77:     public URL getURL() throws IOException {
      78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
```

### Data Flow Step 41: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 42: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 43: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 44: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 45: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 46: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 47: src/main/java/spark/utils/ResourceUtils.java, Line 210, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     205:      *                    the URL was created for (for example, a class path location)
     206:      * @return a corresponding File object
     207:      * @throws FileNotFoundException if the URL cannot be resolved to
     208:      *                               a file in the file system
     209:      */
>>>  210:     public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {
     211:         Assert.notNull(resourceUrl, "Resource URL must not be null");
     212:         if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {
     213:             throw new FileNotFoundException(
     214:                     description + " cannot be resolved to absolute file path " +
     215:                             "because it does not reside in the file system: " + resourceUrl
```

### Data Flow Step 48: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 49: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 50: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 51: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 52: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 53: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 112, Column 44
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
>>>  112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
     117:             return false;
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 51, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
>>>   51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 80, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
      77:                 }
      78:             }
      79: 
>>>   80:             return (resource != null && resource.exists()) ? resource : null;
      81:         } catch (Exception e) {
      82:             if (LOG.isDebugEnabled()) {
      83:                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
      84:             }
      85:         }
```

### Data Flow Step 33: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 34: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 86, Column 58
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      81:                                                     HttpServletResponse httpResponse) throws IOException {
      82:         if (staticResourceHandlers != null) {
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
>>>   86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
      88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
```

### Data Flow Step 35: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 88, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
      86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
>>>   88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
      92:                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);
      93:                     wrappedOutputStream.flush();
```

### Data Flow Step 36: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 106, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     101:             return false;
     102:         }
     103:     }
     104: 
     105:     @Override
>>>  106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
```

### Data Flow Step 37: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 38: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 44, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      39:     /**
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
>>>   44:     public File getFile() throws IOException {
      45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 40: src/main/java/spark/resource/ExternalResource.java, Line 77, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      72:      *
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
>>>   77:     public URL getURL() throws IOException {
      78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
```

### Data Flow Step 41: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 42: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 43: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 44: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 45: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 46: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 47: src/main/java/spark/utils/ResourceUtils.java, Line 210, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     205:      *                    the URL was created for (for example, a class path location)
     206:      * @return a corresponding File object
     207:      * @throws FileNotFoundException if the URL cannot be resolved to
     208:      *                               a file in the file system
     209:      */
>>>  210:     public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {
     211:         Assert.notNull(resourceUrl, "Resource URL must not be null");
     212:         if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {
     213:             throw new FileNotFoundException(
     214:                     description + " cannot be resolved to absolute file path " +
     215:                             "because it does not reside in the file system: " + resourceUrl
```

### Data Flow Step 48: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 49: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 50: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 51: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 52: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 53: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 112, Column 44
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
>>>  112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
     117:             return false;
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 54, Column 27
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
>>>   54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 80, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
      77:                 }
      78:             }
      79: 
>>>   80:             return (resource != null && resource.exists()) ? resource : null;
      81:         } catch (Exception e) {
      82:             if (LOG.isDebugEnabled()) {
      83:                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
      84:             }
      85:         }
```

### Data Flow Step 33: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 34: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 86, Column 58
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      81:                                                     HttpServletResponse httpResponse) throws IOException {
      82:         if (staticResourceHandlers != null) {
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
>>>   86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
      88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
```

### Data Flow Step 35: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 88, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
      86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
>>>   88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
      92:                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);
      93:                     wrappedOutputStream.flush();
```

### Data Flow Step 36: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 106, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     101:             return false;
     102:         }
     103:     }
     104: 
     105:     @Override
>>>  106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
```

### Data Flow Step 37: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 38: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 44, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      39:     /**
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
>>>   44:     public File getFile() throws IOException {
      45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 40: src/main/java/spark/resource/ExternalResource.java, Line 77, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      72:      *
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
>>>   77:     public URL getURL() throws IOException {
      78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
```

### Data Flow Step 41: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 42: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 43: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 44: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 45: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 46: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 47: src/main/java/spark/utils/ResourceUtils.java, Line 210, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     205:      *                    the URL was created for (for example, a class path location)
     206:      * @return a corresponding File object
     207:      * @throws FileNotFoundException if the URL cannot be resolved to
     208:      *                               a file in the file system
     209:      */
>>>  210:     public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {
     211:         Assert.notNull(resourceUrl, "Resource URL must not be null");
     212:         if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {
     213:             throw new FileNotFoundException(
     214:                     description + " cannot be resolved to absolute file path " +
     215:                             "because it does not reside in the file system: " + resourceUrl
```

### Data Flow Step 48: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 49: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 50: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 51: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 52: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 53: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 112, Column 44
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
>>>  112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
     117:             return false;
```

## Code Flow 4

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 55, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
>>>   55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 80, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
      77:                 }
      78:             }
      79: 
>>>   80:             return (resource != null && resource.exists()) ? resource : null;
      81:         } catch (Exception e) {
      82:             if (LOG.isDebugEnabled()) {
      83:                 LOG.debug(e.getClass().getSimpleName() + " when trying to get resource. " + e.getMessage());
      84:             }
      85:         }
```

### Data Flow Step 33: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 34: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 86, Column 58
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      81:                                                     HttpServletResponse httpResponse) throws IOException {
      82:         if (staticResourceHandlers != null) {
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
>>>   86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
      88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
```

### Data Flow Step 35: src/main/java/spark/staticfiles/StaticFilesConfiguration.java, Line 88, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/staticfiles/StaticFilesConfiguration.java
```java
      83: 
      84:             for (AbstractResourceHandler staticResourceHandler : staticResourceHandlers) {
      85: 
      86:                 AbstractFileResolvingResource resource = staticResourceHandler.getResource(httpRequest);
      87: 
>>>   88:                 if (resource != null && resource.isReadable()) {
      89:                     httpResponse.setHeader(MimeType.CONTENT_TYPE, MimeType.fromResource(resource));
      90:                     customHeaders.forEach(httpResponse::setHeader); //add all user-defined headers to response
      91:                     OutputStream wrappedOutputStream = GzipUtils.checkAndWrap(httpRequest, httpResponse, false);
      92:                     IOUtils.copy(resource.getInputStream(), wrappedOutputStream);
      93:                     wrappedOutputStream.flush();
```

### Data Flow Step 36: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 106, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     101:             return false;
     102:         }
     103:     }
     104: 
     105:     @Override
>>>  106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
```

### Data Flow Step 37: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 38: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 44, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      39:     /**
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
>>>   44:     public File getFile() throws IOException {
      45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 40: src/main/java/spark/resource/ExternalResource.java, Line 77, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      72:      *
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
>>>   77:     public URL getURL() throws IOException {
      78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
```

### Data Flow Step 41: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 42: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 43: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 44: src/main/java/spark/resource/ExternalResource.java, Line 78, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      73:      * @see java.lang.ClassLoader#getResource(String)
      74:      * @see java.lang.Class#getResource(String)
      75:      */
      76:     @Override
      77:     public URL getURL() throws IOException {
>>>   78:         return file.toURI().toURL();
      79:     }
      80: 
      81:     /**
      82:      * Gets the path
      83:      *
```

### Data Flow Step 45: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 45, Column 19
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      40:      * This implementation returns a File reference for the underlying class path
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
>>>   45:         URL url = getURL();
      46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
```

### Data Flow Step 46: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 47: src/main/java/spark/utils/ResourceUtils.java, Line 210, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     205:      *                    the URL was created for (for example, a class path location)
     206:      * @return a corresponding File object
     207:      * @throws FileNotFoundException if the URL cannot be resolved to
     208:      *                               a file in the file system
     209:      */
>>>  210:     public static File getFile(URL resourceUrl, String description) throws FileNotFoundException {
     211:         Assert.notNull(resourceUrl, "Resource URL must not be null");
     212:         if (!URL_PROTOCOL_FILE.equals(resourceUrl.getProtocol())) {
     213:             throw new FileNotFoundException(
     214:                     description + " cannot be resolved to absolute file path " +
     215:                             "because it does not reside in the file system: " + resourceUrl
```

### Data Flow Step 48: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 49: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 50: src/main/java/spark/utils/ResourceUtils.java, Line 222, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/ResourceUtils.java
```java
     217:         }
     218:         try {
     219:             return new File(toURI(resourceUrl).getSchemeSpecificPart());
     220:         } catch (URISyntaxException ex) {
     221:             // Fallback for URLs that are not valid URIs (should hardly ever happen).
>>>  222:             return new File(resourceUrl.getFile());
     223:         }
     224:     }
     225: 
     226:     /**
     227:      * Resolve the given resource URI to a {@code java.io.File},
```

### Data Flow Step 51: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 46, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
      41:      * resource, provided that it refers to a file in the file system.
      42:      */
      43:     @Override
      44:     public File getFile() throws IOException {
      45:         URL url = getURL();
>>>   46:         return ResourceUtils.getFile(url, getDescription());
      47:     }
      48: 
      49:     /**
      50:      * This implementation determines the underlying File
      51:      * (or jar file, in case of a resource in a jar/zip).
```

### Data Flow Step 52: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 111, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     106:     public boolean isReadable() {
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
>>>  111:                 File file = getFile();
     112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
```

### Data Flow Step 53: src/main/java/spark/resource/AbstractFileResolvingResource.java, Line 112, Column 44
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractFileResolvingResource.java
```java
     107:         try {
     108:             URL url = getURL();
     109:             if (ResourceUtils.isFileURL(url)) {
     110:                 // Proceed with file system resolution...
     111:                 File file = getFile();
>>>  112:                 return (file.canRead() && !file.isDirectory());
     113:             } else {
     114:                 return true;
     115:             }
     116:         } catch (IOException ex) {
     117:             return false;
```
