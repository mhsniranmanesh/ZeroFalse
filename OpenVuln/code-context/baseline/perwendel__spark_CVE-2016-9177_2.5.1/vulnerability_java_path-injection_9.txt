# Vulnerability: java/path-injection
## Message: This path depends on a [user-provided value](1).
This path depends on a [user-provided value](2).
This path depends on a [user-provided value](3).
This path depends on a [user-provided value](4).
This path depends on a [user-provided value](5).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 50, Column 31
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      45:         if (included) {
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
>>>   50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 71, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
>>>   71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
```

### Data Flow Step 33: src/main/java/spark/resource/ExternalResource.java, Line 51, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      46:      *
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
>>>   51:     public boolean isDirectory() {
      52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
```

### Data Flow Step 34: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

### Data Flow Step 35: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 51, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
>>>   51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 71, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
>>>   71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
```

### Data Flow Step 33: src/main/java/spark/resource/ExternalResource.java, Line 51, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      46:      *
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
>>>   51:     public boolean isDirectory() {
      52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
```

### Data Flow Step 34: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

### Data Flow Step 35: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 54, Column 27
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
>>>   54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 71, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
>>>   71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
```

### Data Flow Step 33: src/main/java/spark/resource/ExternalResource.java, Line 51, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      46:      *
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
>>>   51:     public boolean isDirectory() {
      52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
```

### Data Flow Step 34: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

### Data Flow Step 35: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

## Code Flow 4

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 55, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
>>>   55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ExternalResourceHandler.java, Line 59, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      54:         this.baseResource = baseResource;
      55:         this.welcomeFile = welcomeFile;
      56:     }
      57: 
      58:     @Override
>>>   59:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ExternalResourceHandler.java, Line 65, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      60:         if (path == null || !path.startsWith("/")) {
      61:             throw new MalformedURLException(path);
      62:         }
      63: 
      64:         try {
>>>   65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
```

### Data Flow Step 12: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ExternalResourceHandler.java, Line 67, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      62:         }
      63: 
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
>>>   67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 62
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 29
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 18: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 47
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 19: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 20: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 27: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 25
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 28: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 29: src/main/java/spark/resource/ExternalResource.java, Line 40, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
      39:     public ExternalResource(String path) {
>>>   40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
      45:      * directory.
```

### Data Flow Step 30: src/main/java/spark/resource/ExternalResource.java, Line 39, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      34:     /**
      35:      * Constructor
      36:      *
      37:      * @param path the path to the external resource
      38:      */
>>>   39:     public ExternalResource(String path) {
      40:         file = new File(StringUtils.cleanPath(path));
      41:     }
      42: 
      43:     /**
      44:      * Tests whether the file denoted by this abstract pathname is a
```

### Data Flow Step 31: src/main/java/spark/resource/ExternalResourceHandler.java, Line 69, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      64:         try {
      65:             path = UriPath.canonical(path);
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
>>>   69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
      71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
```

### Data Flow Step 32: src/main/java/spark/resource/ExternalResourceHandler.java, Line 71, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResourceHandler.java
```java
      66: 
      67:             final String addedPath = addPaths(baseResource, path);
      68: 
      69:             ExternalResource resource = new ExternalResource(addedPath);
      70: 
>>>   71:             if (resource.exists() && resource.isDirectory()) {
      72:                 if (welcomeFile != null) {
      73:                     resource = new ExternalResource(addPaths(resource.getPath(), welcomeFile));
      74:                 } else {
      75:                     //  No welcome file configured, serve nothing since it's a directory
      76:                     resource = null;
```

### Data Flow Step 33: src/main/java/spark/resource/ExternalResource.java, Line 51, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      46:      *
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
>>>   51:     public boolean isDirectory() {
      52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
```

### Data Flow Step 34: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```

### Data Flow Step 35: src/main/java/spark/resource/ExternalResource.java, Line 52, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ExternalResource.java
```java
      47:      * @return true if and only if the file denoted by this
      48:      * abstract pathname exists and is a directory;
      49:      * false otherwise
      50:      */
      51:     public boolean isDirectory() {
>>>   52:         return file.isDirectory();
      53:     }
      54: 
      55:     @Override
      56:     public boolean exists() {
      57:         return file.exists();
```
