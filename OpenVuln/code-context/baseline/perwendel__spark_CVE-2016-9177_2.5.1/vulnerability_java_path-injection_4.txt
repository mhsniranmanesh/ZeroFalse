# Vulnerability: java/path-injection
## Message: This path depends on a [user-provided value](1).
This path depends on a [user-provided value](2).
This path depends on a [user-provided value](3).
This path depends on a [user-provided value](4).
This path depends on a [user-provided value](5).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 50, Column 31
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      45:         if (included) {
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
>>>   50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 60, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      55:         this.baseResource = baseResource;
      56:         this.welcomeFile = welcomeFile;
      57:     }
      58: 
      59:     @Override
>>>   60:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 12: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 64
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 18: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 14
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 19: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 20: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 50
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 27: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 28: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 29: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 30: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 21
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 31: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 32: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 33: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 34: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 35: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 42
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 36: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 72, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
>>>   72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
      76:                     //  No welcome file configured, serve nothing since it's a directory
      77:                     resource = null;
```

### Data Flow Step 37: src/main/java/spark/resource/ClassPathResource.java, Line 117, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     112:      * @see java.lang.Class#getResource(String)
     113:      *
     114:      * @return if exists.
     115:      */
     116:     @Override
>>>  117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
     122:             url = this.classLoader.getResource(this.path);
```

### Data Flow Step 38: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 51, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      46:             servletPath = (String) request.getAttribute(RequestDispatcher.INCLUDE_SERVLET_PATH);
      47:             pathInfo = (String) request.getAttribute(RequestDispatcher.INCLUDE_PATH_INFO);
      48: 
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
>>>   51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 60, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      55:         this.baseResource = baseResource;
      56:         this.welcomeFile = welcomeFile;
      57:     }
      58: 
      59:     @Override
>>>   60:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 12: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 64
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 18: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 14
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 19: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 20: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 50
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 27: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 28: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 29: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 30: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 21
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 31: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 32: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 33: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 34: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 35: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 42
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 36: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 72, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
>>>   72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
      76:                     //  No welcome file configured, serve nothing since it's a directory
      77:                     resource = null;
```

### Data Flow Step 37: src/main/java/spark/resource/ClassPathResource.java, Line 117, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     112:      * @see java.lang.Class#getResource(String)
     113:      *
     114:      * @return if exists.
     115:      */
     116:     @Override
>>>  117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
     122:             url = this.classLoader.getResource(this.path);
```

### Data Flow Step 38: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 54, Column 27
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      49:             if (servletPath == null && pathInfo == null) {
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
>>>   54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 41
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 35
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 83, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      78:      * @return Legally combined path segments.
      79:      */
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
>>>   83:                 return segment1;
      84:             }
      85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 60, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      55:         this.baseResource = baseResource;
      56:         this.welcomeFile = welcomeFile;
      57:     }
      58: 
      59:     @Override
>>>   60:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 12: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 64
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 18: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 14
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 19: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 20: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 50
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 27: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 28: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 29: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 30: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 21
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 31: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 32: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 33: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 34: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 35: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 42
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 36: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 72, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
>>>   72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
      76:                     //  No welcome file configured, serve nothing since it's a directory
      77:                     resource = null;
```

### Data Flow Step 37: src/main/java/spark/resource/ClassPathResource.java, Line 117, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     112:      * @see java.lang.Class#getResource(String)
     113:      *
     114:      * @return if exists.
     115:      */
     116:     @Override
>>>  117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
     122:             url = this.classLoader.getResource(this.path);
```

### Data Flow Step 38: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

## Code Flow 4

### Thread Flow 1

### Data Flow Step 1: src/main/java/spark/resource/AbstractResourceHandler.java, Line 55, Column 24
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      50:                 servletPath = request.getServletPath();
      51:                 pathInfo = request.getPathInfo();
      52:             }
      53:         } else {
      54:             servletPath = request.getServletPath();
>>>   55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
```

### Data Flow Step 2: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 54
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 3: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 4: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 5: src/main/java/spark/resource/AbstractResourceHandler.java, Line 58, Column 32
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      53:         } else {
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
>>>   58:         String pathInContext = addPaths(servletPath, pathInfo);
      59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
```

### Data Flow Step 6: src/main/java/spark/resource/AbstractResourceHandler.java, Line 59, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      54:             servletPath = request.getServletPath();
      55:             pathInfo = request.getPathInfo();
      56:         }
      57: 
      58:         String pathInContext = addPaths(servletPath, pathInfo);
>>>   59:         return getResource(pathInContext);
      60:     }
      61: 
      62:     /**
      63:      * Gets resource from path
      64:      *
```

### Data Flow Step 7: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 60, Column 57
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      55:         this.baseResource = baseResource;
      56:         this.welcomeFile = welcomeFile;
      57:     }
      58: 
      59:     @Override
>>>   60:     protected AbstractFileResolvingResource getResource(String path) throws MalformedURLException {
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
```

### Data Flow Step 8: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 9: src/main/java/spark/resource/UriPath.java, Line 32, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      27:      * if the path tries to .. above its root.
      28:      *
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
>>>   32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
      34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
```

### Data Flow Step 10: src/main/java/spark/resource/UriPath.java, Line 34, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/UriPath.java
```java
      29:      * @param path the path to convert
      30:      * @return path or null.
      31:      */
      32:     public static String canonical(String path) {
      33:         if (path == null || path.length() == 0) {
>>>   34:             return path;
      35:         }
      36: 
      37:         int end = path.length();
      38:         int start = path.lastIndexOf('/', end);
      39: 
```

### Data Flow Step 11: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 66, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      61:         if (path == null || !path.startsWith("/")) {
      62:             throw new MalformedURLException(path);
      63:         }
      64: 
      65:         try {
>>>   66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
```

### Data Flow Step 12: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 61
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 13: src/main/java/spark/resource/AbstractResourceHandler.java, Line 80, Column 52
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      75:      *
      76:      * @param segment1 URI path segment (should be encoded)
      77:      * @param segment2 URI path segment (should be encoded)
      78:      * @return Legally combined path segments.
      79:      */
>>>   80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
      85:             return segment2;
```

### Data Flow Step 14: src/main/java/spark/resource/AbstractResourceHandler.java, Line 85, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/AbstractResourceHandler.java
```java
      80:     public static String addPaths(String segment1, String segment2) {
      81:         if (segment1 == null || segment1.length() == 0) {
      82:             if (segment1 != null && segment2 == null) {
      83:                 return segment1;
      84:             }
>>>   85:             return segment2;
      86:         }
      87:         if (segment2 == null || segment2.length() == 0) {
      88:             return segment1;
      89:         }
      90: 
```

### Data Flow Step 15: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 68, Column 38
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      63:         }
      64: 
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
>>>   68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
```

### Data Flow Step 16: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 64
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 17: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 18: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 14
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 19: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 30
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 20: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 50
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 21: src/main/java/spark/utils/StringUtils.java, Line 218, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     213:      * notice that Windows separators ("\") are replaced by simple slashes.
     214:      *
     215:      * @param path the original path
     216:      * @return the normalized path
     217:      */
>>>  218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
     222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
```

### Data Flow Step 22: src/main/java/spark/utils/StringUtils.java, Line 222, Column 36
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 23: src/main/java/spark/utils/StringUtils.java, Line 131, Column 34
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     126:      * @param inString   String to examine
     127:      * @param oldPattern String to replace
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
>>>  131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
     133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
```

### Data Flow Step 24: src/main/java/spark/utils/StringUtils.java, Line 133, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     128:      * @param newPattern String to insert
     129:      * @return a String with the replacements
     130:      */
     131:     public static String replace(String inString, String oldPattern, String newPattern) {
     132:         if (!hasLength(inString) || !hasLength(oldPattern) || newPattern == null) {
>>>  133:             return inString;
     134:         }
     135:         StringBuilder sb = new StringBuilder();
     136:         int pos = 0; // our position in the old string
     137:         int index = inString.indexOf(oldPattern);
     138:         // the index of an occurrence we've found, or -1
```

### Data Flow Step 25: src/main/java/spark/utils/StringUtils.java, Line 222, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     217:      */
     218:     public static String cleanPath(String path) {
     219:         if (path == null) {
     220:             return null;
     221:         }
>>>  222:         String pathToUse = replace(path, WINDOWS_FOLDER_SEPARATOR, FOLDER_SEPARATOR);
     223: 
     224:         // Strip prefix from path to analyze, to not treat it as part of the
     225:         // first path element. This is necessary to correctly parse paths like
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
```

### Data Flow Step 26: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 27: src/main/java/spark/utils/StringUtils.java, Line 231, Column 22
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     226:         // "file:core/../core/io/Resource.class", where the ".." should just
     227:         // strip the first "core" directory while keeping the "file:" prefix.
     228:         int prefixIndex = pathToUse.indexOf(":");
     229:         String prefix = "";
     230:         if (prefixIndex != -1) {
>>>  231:             prefix = pathToUse.substring(0, prefixIndex + 1);
     232:             pathToUse = pathToUse.substring(prefixIndex + 1);
     233:         }
     234:         if (pathToUse.startsWith(FOLDER_SEPARATOR)) {
     235:             prefix = prefix + FOLDER_SEPARATOR;
     236:             pathToUse = pathToUse.substring(1);
```

### Data Flow Step 28: src/main/java/spark/utils/StringUtils.java, Line 266, Column 16
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/utils/StringUtils.java
```java
     261:         // Remaining top paths need to be retained.
     262:         for (int i = 0; i < tops; i++) {
     263:             pathElements.add(0, TOP_PATH);
     264:         }
     265: 
>>>  266:         return prefix + collectionToDelimitedString(pathElements, FOLDER_SEPARATOR);
     267:     }
     268: 
     269:     /**
     270:      * Copy the given Collection into a String array.
     271:      * The Collection must contain String elements only.
```

### Data Flow Step 29: src/main/java/spark/resource/ClassPathResource.java, Line 77, Column 28
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
      75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
>>>   77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
      81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
```

### Data Flow Step 30: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 21
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 31: src/main/java/spark/resource/ClassPathResource.java, Line 81, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
>>>   81:         this.path = pathToUse;
      82:         this.classLoader = (classLoader != null ? classLoader : ClassUtils.getDefaultClassLoader());
      83:     }
      84: 
      85:     /**
      86:      * Create a new ClassPathResource with optional ClassLoader and Class.
```

### Data Flow Step 32: src/main/java/spark/resource/ClassPathResource.java, Line 75, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      70:      * @param path        the absolute path within the classpath
      71:      * @param classLoader the class loader to load the resource with,
      72:      *                    or {@code null} for the thread context class loader
      73:      * @see ClassLoader#getResourceAsStream(String)
      74:      */
>>>   75:     public ClassPathResource(String path, ClassLoader classLoader) {
      76:         Assert.notNull(path, "Path must not be null");
      77:         String pathToUse = StringUtils.cleanPath(path);
      78:         if (pathToUse.startsWith("/")) {
      79:             pathToUse = pathToUse.substring(1);
      80:         }
```

### Data Flow Step 33: src/main/java/spark/resource/ClassPathResource.java, Line 62, Column 9
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
      61:     public ClassPathResource(String path) {
>>>   62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
      67:      * A leading slash will be removed, as the ClassLoader
```

### Data Flow Step 34: src/main/java/spark/resource/ClassPathResource.java, Line 61, Column 12
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
      56:      *
      57:      * @param path the absolute path within the class path
      58:      * @see java.lang.ClassLoader#getResourceAsStream(String)
      59:      * @see spark.utils.ClassUtils#getDefaultClassLoader()
      60:      */
>>>   61:     public ClassPathResource(String path) {
      62:         this(path, null);
      63:     }
      64: 
      65:     /**
      66:      * Create a new ClassPathResource for ClassLoader usage.
```

### Data Flow Step 35: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 70, Column 42
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      65:         try {
      66:             path = UriPath.canonical(path);
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
>>>   70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
      72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
```

### Data Flow Step 36: src/main/java/spark/resource/ClassPathResourceHandler.java, Line 72, Column 17
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResourceHandler.java
```java
      67: 
      68:             final String addedPath = addPaths(baseResource, path);
      69: 
      70:             ClassPathResource resource = new ClassPathResource(addedPath);
      71: 
>>>   72:             if (resource.exists() && resource.getFile().isDirectory()) {
      73:                 if (welcomeFile != null) {
      74:                     resource = new ClassPathResource(addPaths(resource.getPath(), welcomeFile));
      75:                 } else {
      76:                     //  No welcome file configured, serve nothing since it's a directory
      77:                     resource = null;
```

### Data Flow Step 37: src/main/java/spark/resource/ClassPathResource.java, Line 117, Column 20
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     112:      * @see java.lang.Class#getResource(String)
     113:      *
     114:      * @return if exists.
     115:      */
     116:     @Override
>>>  117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
     122:             url = this.classLoader.getResource(this.path);
```

### Data Flow Step 38: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```

### Data Flow Step 39: src/main/java/spark/resource/ClassPathResource.java, Line 122, Column 48
File: codeql-dbs/perwendel__spark_CVE-2016-9177_2.5.1/root/cwe-bench-java/project-sources/perwendel__spark_CVE-2016-9177_2.5.1/src/main/java/spark/resource/ClassPathResource.java
```java
     117:     public boolean exists() {
     118:         URL url;
     119:         if (this.clazz != null) {
     120:             url = this.clazz.getResource(this.path);
     121:         } else {
>>>  122:             url = this.classLoader.getResource(this.path);
     123:         }
     124:         return (url != null);
     125:     }
     126: 
     127:     /**
```
