# Vulnerability: java/xss
## Message: Cross-site scripting vulnerability due to a [user-provided value](1).
Cross-site scripting vulnerability due to a [user-provided value](2).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 245, Column 23
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     240:             {
     241:                 out = getItemValue( cookie, m_item );
     242:             }
     243:             else
     244:             {
>>>  245:                 out = cookie.getValue();
     246:             }
     247:         }
     248: 
     249:         if( out != null )
     250:         {
```

### Data Flow Step 2: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 260, Column 49
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     255:             }
     256:             else
     257:             {
     258:                 try
     259:                 {
>>>  260:                     pageContext.getOut().print( out );
     261:                 }
     262:                 catch( final IOException ioe )
     263:                 {
     264:                     LOG.warn( "Failed to write to JSP page: " + ioe.getMessage(), ioe );
     265:                 }
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 320, Column 27
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     315:     private String getItemValue(final Cookie c, final String item )
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
>>>  320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
```

### Data Flow Step 2: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 321, Column 65
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
>>>  321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
```

### Data Flow Step 3: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 330, Column 51
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
     328:      * into a Map<String,String>.
     329:      */
>>>  330:     private Map<String, String> parseCookieValues(final String s )
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
```

### Data Flow Step 4: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 336, Column 31
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
>>>  336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
```

### Data Flow Step 5: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 336, Column 31
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
>>>  336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
```

### Data Flow Step 6: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 341, Column 39
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
>>>  341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
```

### Data Flow Step 7: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 399, Column 27
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     394: 
     395:     /**
     396:      * Converts a cookie value (set by this class, or by a JavaScript
     397:      * encodeURIComponent call) into a plain string.
     398:      */
>>>  399:     private String decode(final String envp )
     400:     {
     401:         final String rval;
     402:         try
     403:         {
     404:             rval = URLDecoder.decode( envp , StandardCharsets.UTF_8.name() );
```

### Data Flow Step 8: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 410, Column 20
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     405:             return rval;
     406:         }
     407:         catch( final UnsupportedEncodingException e )
     408:         {
     409:             LOG.error( "Failed to decode cookie", e );
>>>  410:             return envp;
     411:         }
     412:     }
     413: 
     414:     /**
     415:      * Locates the named cookie in the request, or creates a new one if it
```

### Data Flow Step 9: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 341, Column 32
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
>>>  341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
```

### Data Flow Step 10: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 342, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
>>>  342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
```

### Data Flow Step 11: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 342, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
>>>  342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
```

### Data Flow Step 12: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 344, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
>>>  344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
     348:         return rval;
     349:     }
```

### Data Flow Step 13: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 344, Column 17
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
>>>  344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
     348:         return rval;
     349:     }
```

### Data Flow Step 14: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 348, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
>>>  348:         return rval;
     349:     }
     350: 
     351:     /**
     352:      * Encodes name-value pairs in the map into a single string, in a format
     353:      * understood by this class and JavaScript decodeURIComponent().
```

### Data Flow Step 15: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 321, Column 46
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
>>>  321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
```

### Data Flow Step 16: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 322, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
>>>  322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
```

### Data Flow Step 17: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 322, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
>>>  322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
```

### Data Flow Step 18: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 241, Column 23
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     236:         }
     237:         else
     238:         {
     239:             if( m_item != null )
     240:             {
>>>  241:                 out = getItemValue( cookie, m_item );
     242:             }
     243:             else
     244:             {
     245:                 out = cookie.getValue();
     246:             }
```

### Data Flow Step 19: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 260, Column 49
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     255:             }
     256:             else
     257:             {
     258:                 try
     259:                 {
>>>  260:                     pageContext.getOut().print( out );
     261:                 }
     262:                 catch( final IOException ioe )
     263:                 {
     264:                     LOG.warn( "Failed to write to JSP page: " + ioe.getMessage(), ioe );
     265:                 }
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 320, Column 27
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     315:     private String getItemValue(final Cookie c, final String item )
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
>>>  320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
```

### Data Flow Step 2: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 321, Column 65
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
>>>  321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
```

### Data Flow Step 3: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 330, Column 51
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
     328:      * into a Map<String,String>.
     329:      */
>>>  330:     private Map<String, String> parseCookieValues(final String s )
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
```

### Data Flow Step 4: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 336, Column 31
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
>>>  336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
```

### Data Flow Step 5: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 336, Column 31
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     331:     {
     332:         final Map< String, String > rval = new HashMap<>();
     333:         if( s == null ) {
     334:             return rval;
     335:         }
>>>  336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
```

### Data Flow Step 6: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 341, Column 39
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
>>>  341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
```

### Data Flow Step 7: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 399, Column 27
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     394: 
     395:     /**
     396:      * Converts a cookie value (set by this class, or by a JavaScript
     397:      * encodeURIComponent call) into a plain string.
     398:      */
>>>  399:     private String decode(final String envp )
     400:     {
     401:         final String rval;
     402:         try
     403:         {
     404:             rval = URLDecoder.decode( envp , StandardCharsets.UTF_8.name() );
```

### Data Flow Step 8: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 404, Column 39
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     399:     private String decode(final String envp )
     400:     {
     401:         final String rval;
     402:         try
     403:         {
>>>  404:             rval = URLDecoder.decode( envp , StandardCharsets.UTF_8.name() );
     405:             return rval;
     406:         }
     407:         catch( final UnsupportedEncodingException e )
     408:         {
     409:             LOG.error( "Failed to decode cookie", e );
```

### Data Flow Step 9: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 404, Column 20
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     399:     private String decode(final String envp )
     400:     {
     401:         final String rval;
     402:         try
     403:         {
>>>  404:             rval = URLDecoder.decode( envp , StandardCharsets.UTF_8.name() );
     405:             return rval;
     406:         }
     407:         catch( final UnsupportedEncodingException e )
     408:         {
     409:             LOG.error( "Failed to decode cookie", e );
```

### Data Flow Step 10: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 405, Column 20
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     400:     {
     401:         final String rval;
     402:         try
     403:         {
     404:             rval = URLDecoder.decode( envp , StandardCharsets.UTF_8.name() );
>>>  405:             return rval;
     406:         }
     407:         catch( final UnsupportedEncodingException e )
     408:         {
     409:             LOG.error( "Failed to decode cookie", e );
     410:             return envp;
```

### Data Flow Step 11: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 341, Column 32
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     336:         final String[] nvps = s.split( "&" );
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
>>>  341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
```

### Data Flow Step 12: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 342, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
>>>  342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
```

### Data Flow Step 13: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 342, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     337:         if( nvps.length == 0 ) {
     338:             return rval;
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
>>>  342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
```

### Data Flow Step 14: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 344, Column 33
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
>>>  344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
     348:         return rval;
     349:     }
```

### Data Flow Step 15: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 344, Column 17
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     339:         }
     340:         for (final String value : nvps) {
     341:             final String nvp = decode(value);
     342:             final String[] nv = nvp.split("=");
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
>>>  344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
     348:         return rval;
     349:     }
```

### Data Flow Step 16: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 348, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     343:             if (nv[0] != null && !nv[0].trim().isEmpty()) {
     344:                 rval.put(nv[0], nv[1]);
     345:             }
     346:         }
     347: 
>>>  348:         return rval;
     349:     }
     350: 
     351:     /**
     352:      * Encodes name-value pairs in the map into a single string, in a format
     353:      * understood by this class and JavaScript decodeURIComponent().
```

### Data Flow Step 17: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 321, Column 46
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     316:     {
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
>>>  321:         final Map< String, String > values = parseCookieValues( in );
     322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
```

### Data Flow Step 18: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 322, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
>>>  322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
```

### Data Flow Step 19: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 322, Column 16
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     317:         if( c == null || item == null ) {
     318:             return null;
     319:         }
     320:         final String in = c.getValue();
     321:         final Map< String, String > values = parseCookieValues( in );
>>>  322:         return values.get( item );
     323:     }
     324: 
     325: 
     326:     /**
     327:      * Parses a cookie value, of format name1%3Fvalue1&name2%3Fvalue2...,
```

### Data Flow Step 20: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 241, Column 23
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     236:         }
     237:         else
     238:         {
     239:             if( m_item != null )
     240:             {
>>>  241:                 out = getItemValue( cookie, m_item );
     242:             }
     243:             else
     244:             {
     245:                 out = cookie.getValue();
     246:             }
```

### Data Flow Step 21: jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java, Line 260, Column 49
File: codeql-dbs/apache__jspwiki_CVE-2022-46907_2.11.3/root/cwe-bench-java/project-sources/apache__jspwiki_CVE-2022-46907_2.11.3/jspwiki-main/src/main/java/org/apache/wiki/tags/CookieTag.java
```java
     255:             }
     256:             else
     257:             {
     258:                 try
     259:                 {
>>>  260:                     pageContext.getOut().print( out );
     261:                 }
     262:                 catch( final IOException ioe )
     263:                 {
     264:                     LOG.warn( "Failed to write to JSP page: " + ioe.getMessage(), ioe );
     265:                 }
```
