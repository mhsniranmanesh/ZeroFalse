# Vulnerability: java/zipslip
## Message: Unsanitized archive entry, which may contain '..', is used in a [file system operation](1).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](2).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](3).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](4).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](5).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](6).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1215, Column 18
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
>>> 1215:             if (!file.exists()) {
    1216:               FileUtils.forceMkdir(file);
    1217:             }
    1218:             parentDirectory = file;
    1219:           }
    1220:           File destFile = new File(parentDirectory, dirs[dirs.length - 1]);
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1226, Column 30
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1221:           FileUtils.copy(in, destFile);
    1222:         }
    1223:         // it could be that there are just top level files that the unpacker is used for
    1224:         else {
    1225:           File destFile = new File(outputDir, name);
>>> 1226:           FileUtils.copy(in, destFile);
    1227:         }
    1228:       }
    1229:     }
    1230:   }
    1231: 
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/commons/FileUtils.java, Line 53, Column 43
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtils.java
```java
      48:    * @param in source stream.
      49:    * @param file output file to be created or overwritten.
      50:    *
      51:    * @throws java.io.IOException if file is not found or copying fails
      52:    */
>>>   53:   public static void copy(InputStream in, File file) throws IOException {
      54:     OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
      55:     try {
      56:       IOUtils.copy(in, out);
      57:     }
      58:     finally {
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/commons/FileUtils.java, Line 54, Column 70
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtils.java
```java
      49:    * @param file output file to be created or overwritten.
      50:    *
      51:    * @throws java.io.IOException if file is not found or copying fails
      52:    */
      53:   public static void copy(InputStream in, File file) throws IOException {
>>>   54:     OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
      55:     try {
      56:       IOUtils.copy(in, out);
      57:     }
      58:     finally {
      59:       IOUtils.closeQuietly(out);
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1216, Column 36
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
>>> 1216:               FileUtils.forceMkdir(file);
    1217:             }
    1218:             parentDirectory = file;
    1219:           }
    1220:           File destFile = new File(parentDirectory, dirs[dirs.length - 1]);
    1221:           FileUtils.copy(in, destFile);
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 880, Column 33
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     875:    *
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
>>>  880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 881, Column 9
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
     880:   public static void forceMkdir(File directory) throws IOException {
>>>  881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
     886:                 + " exists and is "
```

## Code Flow 4

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1196, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1191:     public BackslashUnpacker(File outputDir) {
    1192:       this(outputDir, IdentityNameMapper.INSTANCE);
    1193:     }
    1194: 
    1195:     public void process(InputStream in, ZipEntry zipEntry) throws IOException {
>>> 1196:       String name = mapper.map(zipEntry.getName());
    1197:       if (name != null) {
    1198:         /**
    1199:          * We assume that EVERY backslash will denote a directory
    1200:          * separator. Also such broken archives don't have entries that
    1201:          * are just directories. Everything is a file. See the example
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1210, Column 27
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1205:          * testing: testDirectory\testSubdirectory\testFileInTestSubdirectory.txt OK
    1206:          * No errors detected in compressed data of backSlashTest.zip.
    1207:          */
    1208:         if (name.indexOf('\\') != -1) {
    1209:           File parentDirectory = outputDir;
>>> 1210:           String[] dirs = name.split("\\\\");
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1216, Column 36
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1211: 
    1212:           // lets create all the directories and the last entry is the file as EVERY entry is a file
    1213:           for (int i = 0; i < dirs.length - 1; i++) {
    1214:             File file = new File(parentDirectory, dirs[i]);
    1215:             if (!file.exists()) {
>>> 1216:               FileUtils.forceMkdir(file);
    1217:             }
    1218:             parentDirectory = file;
    1219:           }
    1220:           File destFile = new File(parentDirectory, dirs[dirs.length - 1]);
    1221:           FileUtils.copy(in, destFile);
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 880, Column 33
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     875:    *
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
>>>  880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 882, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
     880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
>>>  882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
     886:                 + " exists and is "
     887:                 + "not a directory. Unable to create directory.";
```
