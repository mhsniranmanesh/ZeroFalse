# Vulnerability: java/zipslip
## Message: Unsanitized archive entry, which may contain '..', is used in a [file system operation](1).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](2).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](3).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](4).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](5).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](6).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 54
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1276, Column 49
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1271:           FileUtils.copy(in, file);
    1272:         }
    1273:       }
    1274:     }
    1275: 
>>> 1276:     private String getUnrootedName(String root, String name) {
    1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1267, Column 39
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1262:           FileUtils.forceMkdir(file);
    1263:         }
    1264:         else {
    1265:           FileUtils.forceMkdir(file.getParentFile());
    1266: 
>>> 1267:           if (log.isDebugEnabled() && file.exists()) {
    1268:             log.debug("Overwriting file '{}'.", zipEntry.getName());
    1269:           }
    1270: 
    1271:           FileUtils.copy(in, file);
    1272:         }
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 54
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1276, Column 49
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1271:           FileUtils.copy(in, file);
    1272:         }
    1273:       }
    1274:     }
    1275: 
>>> 1276:     private String getUnrootedName(String root, String name) {
    1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1271, Column 30
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1266: 
    1267:           if (log.isDebugEnabled() && file.exists()) {
    1268:             log.debug("Overwriting file '{}'.", zipEntry.getName());
    1269:           }
    1270: 
>>> 1271:           FileUtils.copy(in, file);
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
```

### Data Flow Step 10: src/main/java/org/zeroturnaround/zip/commons/FileUtils.java, Line 53, Column 43
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtils.java
```java
      48:    * @param in source stream.
      49:    * @param file output file to be created or overwritten.
      50:    *
      51:    * @throws java.io.IOException if file is not found or copying fails
      52:    */
>>>   53:   public static void copy(InputStream in, File file) throws IOException {
      54:     OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
      55:     try {
      56:       IOUtils.copy(in, out);
      57:     }
      58:     finally {
```

### Data Flow Step 11: src/main/java/org/zeroturnaround/zip/commons/FileUtils.java, Line 54, Column 70
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtils.java
```java
      49:    * @param file output file to be created or overwritten.
      50:    *
      51:    * @throws java.io.IOException if file is not found or copying fails
      52:    */
      53:   public static void copy(InputStream in, File file) throws IOException {
>>>   54:     OutputStream out = new BufferedOutputStream(new FileOutputStream(file));
      55:     try {
      56:       IOUtils.copy(in, out);
      57:     }
      58:     finally {
      59:       IOUtils.closeQuietly(out);
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 54
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1276, Column 49
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1271:           FileUtils.copy(in, file);
    1272:         }
    1273:       }
    1274:     }
    1275: 
>>> 1276:     private String getUnrootedName(String root, String name) {
    1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1262, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1257: 
    1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
>>> 1262:           FileUtils.forceMkdir(file);
    1263:         }
    1264:         else {
    1265:           FileUtils.forceMkdir(file.getParentFile());
    1266: 
    1267:           if (log.isDebugEnabled() && file.exists()) {
```

### Data Flow Step 10: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 880, Column 33
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     875:    *
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
>>>  880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
```

### Data Flow Step 11: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 881, Column 9
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
     880:   public static void forceMkdir(File directory) throws IOException {
>>>  881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
     886:                 + " exists and is "
```

## Code Flow 4

### Thread Flow 1

### Data Flow Step 1: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 54
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 2: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1276, Column 49
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1271:           FileUtils.copy(in, file);
    1272:         }
    1273:       }
    1274:     }
    1275: 
>>> 1276:     private String getUnrootedName(String root, String name) {
    1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
```

### Data Flow Step 3: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 4: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1277, Column 14
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1272:         }
    1273:       }
    1274:     }
    1275: 
    1276:     private String getUnrootedName(String root, String name) {
>>> 1277:       return name.substring(root.length());
    1278:     }
    1279: 
    1280:     private String getRootName(final String name) {
    1281:       String newName = name.substring(FilenameUtils.getPrefixLength(name));
    1282:       int idx = newName.indexOf(PATH_SEPARATOR);
```

### Data Flow Step 5: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 6: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 31, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      26: 
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
>>>   31:   public String map(String name) {
      32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 7: src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java, Line 32, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/IdentityNameMapper.java
```java
      27:   public static final NameMapper INSTANCE = new IdentityNameMapper();
      28: 
      29:   private IdentityNameMapper() {}
      30: 
      31:   public String map(String name) {
>>>   32:     return name;
      33:   }
      34: 
      35: }
```

### Data Flow Step 8: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1258, Column 21
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1253:       }
    1254:       else if (!rootDir.equals(root)) {
    1255:         throw new ZipException("Unwrapping with multiple roots is not supported, roots: " + rootDir + ", " + root);
    1256:       }
    1257: 
>>> 1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
    1262:           FileUtils.forceMkdir(file);
    1263:         }
```

### Data Flow Step 9: src/main/java/org/zeroturnaround/zip/ZipUtil.java, Line 1262, Column 32
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/ZipUtil.java
```java
    1257: 
    1258:       String name = mapper.map(getUnrootedName(root, zipEntry.getName()));
    1259:       if (name != null) {
    1260:         File file = new File(outputDir, name);
    1261:         if (zipEntry.isDirectory()) {
>>> 1262:           FileUtils.forceMkdir(file);
    1263:         }
    1264:         else {
    1265:           FileUtils.forceMkdir(file.getParentFile());
    1266: 
    1267:           if (log.isDebugEnabled() && file.exists()) {
```

### Data Flow Step 10: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 880, Column 33
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     875:    *
     876:    * @param directory  directory to create, must not be <code>null</code>
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
>>>  880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
     882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
```

### Data Flow Step 11: src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java, Line 882, Column 12
File: codeql-dbs/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/root/cwe-bench-java/project-sources/zeroturnaround__zt-zip_CVE-2018-1002201_1.12/src/main/java/org/zeroturnaround/zip/commons/FileUtilsV2_2.java
```java
     877:    * @throws NullPointerException if the directory is <code>null</code>
     878:    * @throws IOException if the directory cannot be created or the file already exists but is not a directory
     879:    */
     880:   public static void forceMkdir(File directory) throws IOException {
     881:     if (directory.exists()) {
>>>  882:       if (!directory.isDirectory()) {
     883:         String message =
     884:             "File "
     885:                 + directory
     886:                 + " exists and is "
     887:                 + "not a directory. Unable to create directory.";
```
