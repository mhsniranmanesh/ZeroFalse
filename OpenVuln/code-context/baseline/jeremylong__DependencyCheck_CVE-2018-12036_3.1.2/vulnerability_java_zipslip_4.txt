# Vulnerability: java/zipslip
## Message: Unsanitized archive entry, which may contain '..', is used in a [file system operation](1).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java, Line 102, Column 59
File: codeql-dbs/jeremylong__DependencyCheck_CVE-2018-12036_3.1.2/root/cwe-bench-java/project-sources/jeremylong__DependencyCheck_CVE-2018-12036_3.1.2/core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
```java
      97:                     if (!d.exists() && !d.mkdirs()) {
      98:                         final String msg = String.format("Unable to create '%s'.", d.getAbsolutePath());
      99:                         throw new ExtractionException(msg);
     100:                     }
     101:                 } else {
>>>  102:                     final File file = new File(extractTo, entry.getName());
     103:                     if (engine == null || engine.accept(file)) {
     104:                         try (FileOutputStream fos = new FileOutputStream(file)) {
     105:                             IOUtils.copy(zis, fos);
     106:                         } catch (FileNotFoundException ex) {
     107:                             LOGGER.debug("", ex);
```

### Data Flow Step 2: core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java, Line 104, Column 74
File: codeql-dbs/jeremylong__DependencyCheck_CVE-2018-12036_3.1.2/root/cwe-bench-java/project-sources/jeremylong__DependencyCheck_CVE-2018-12036_3.1.2/core/src/main/java/org/owasp/dependencycheck/utils/ExtractionUtil.java
```java
      99:                         throw new ExtractionException(msg);
     100:                     }
     101:                 } else {
     102:                     final File file = new File(extractTo, entry.getName());
     103:                     if (engine == null || engine.accept(file)) {
>>>  104:                         try (FileOutputStream fos = new FileOutputStream(file)) {
     105:                             IOUtils.copy(zis, fos);
     106:                         } catch (FileNotFoundException ex) {
     107:                             LOGGER.debug("", ex);
     108:                             final String msg = String.format("Unable to find file '%s'.", file.getName());
     109:                             throw new ExtractionException(msg, ex);
```
