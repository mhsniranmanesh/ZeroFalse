# Vulnerability: java/zipslip
## Message: Unsanitized archive entry, which may contain '..', is used in a [file system operation](1).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](2).
Unsanitized archive entry, which may contain '..', is used in a [file system operation](3).

## Code Flow 1

### Thread Flow 1

### Data Flow Step 1: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 26, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      21:       processZipEntry(zip, targetPath, e);
      22:     }
      23:   }
      24: 
      25:   private static void processZipEntry(ZipInputStream zip, Path targetPath, ZipEntry e) throws IOException {
>>>   26:     String name = e.getName();
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
```

### Data Flow Step 2: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 33
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 3: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 23
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 4: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 42, Column 40
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      37: 
      38:     if (e.isDirectory()) {
      39:       zip.closeEntry();
      40:       return;
      41:     }
>>>   42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
```

### Data Flow Step 5: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 45, Column 73
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      40:       return;
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
>>>   45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
```

### Data Flow Step 6: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 7: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 8: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 27
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 9: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 50, Column 62
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
>>>   50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
      52:       fileOutputStream.write(c);
      53:     }
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
```

### Data Flow Step 10: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 50, Column 62
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
>>>   50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
      52:       fileOutputStream.write(c);
      53:     }
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
```

## Code Flow 2

### Thread Flow 1

### Data Flow Step 1: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 26, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      21:       processZipEntry(zip, targetPath, e);
      22:     }
      23:   }
      24: 
      25:   private static void processZipEntry(ZipInputStream zip, Path targetPath, ZipEntry e) throws IOException {
>>>   26:     String name = e.getName();
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
```

### Data Flow Step 2: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 33
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 3: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 23
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 4: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 42, Column 40
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      37: 
      38:     if (e.isDirectory()) {
      39:       zip.closeEntry();
      40:       return;
      41:     }
>>>   42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
```

### Data Flow Step 5: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 45, Column 73
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      40:       return;
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
>>>   45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
```

### Data Flow Step 6: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 7: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 8: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 27
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 9: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 48, Column 34
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
>>>   48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
      52:       fileOutputStream.write(c);
      53:     }
```

### Data Flow Step 10: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 58, Column 52
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      53:     }
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
>>>   58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
```

### Data Flow Step 11: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 59, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
>>>   59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 12: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 59, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
>>>   59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 13: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 60, Column 10
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
>>>   60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 14: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 60, Column 10
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
>>>   60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

## Code Flow 3

### Thread Flow 1

### Data Flow Step 1: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 26, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      21:       processZipEntry(zip, targetPath, e);
      22:     }
      23:   }
      24: 
      25:   private static void processZipEntry(ZipInputStream zip, Path targetPath, ZipEntry e) throws IOException {
>>>   26:     String name = e.getName();
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
```

### Data Flow Step 2: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 33
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 3: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 32, Column 23
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      27:     if (!name.startsWith(TestExecutor.TX_CACHE)) {
      28:       zip.closeEntry();
      29:       return;
      30:     }
      31: 
>>>   32:     Path sourcePath = Paths.get(name);
      33:     if (sourcePath.getNameCount() <= 1) {
      34:       zip.closeEntry();
      35:       return;
      36:     }
      37: 
```

### Data Flow Step 4: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 42, Column 40
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      37: 
      38:     if (e.isDirectory()) {
      39:       zip.closeEntry();
      40:       return;
      41:     }
>>>   42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
```

### Data Flow Step 5: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 45, Column 73
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      40:       return;
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
>>>   45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
```

### Data Flow Step 6: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 7: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 46
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 8: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 46, Column 27
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      41:     }
      42:     extractFileFromZipInputStream(zip, sourcePath, targetPath);
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
>>>   46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
      48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
```

### Data Flow Step 9: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 48, Column 34
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      43:   }
      44: 
      45:   private static void extractFileFromZipInputStream(ZipInputStream zip, Path sourcePath, Path targetPath) throws IOException {
      46:     Path fileTargetPath = targetPath.resolve(sourcePath.subpath(1, sourcePath.getNameCount()));
      47: 
>>>   48:     makeFileParentDirsIfNotExist(fileTargetPath);
      49: 
      50:     FileOutputStream fileOutputStream = new FileOutputStream(fileTargetPath.toFile());
      51:     for (int c = zip.read(); c != -1; c = zip.read()) {
      52:       fileOutputStream.write(c);
      53:     }
```

### Data Flow Step 10: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 58, Column 52
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      53:     }
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
>>>   58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
```

### Data Flow Step 11: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 59, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
>>>   59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 12: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 59, Column 19
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      54:     zip.closeEntry();
      55:     fileOutputStream.close();
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
>>>   59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
      61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 13: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 61, Column 7
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
>>>   61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```

### Data Flow Step 14: org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java, Line 61, Column 7
File: codeql-dbs/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/root/cwe-bench-java/project-sources/hapifhir__org.hl7.fhir.core_CVE-2023-28465_5.6.105/org.hl7.fhir.validation/src/main/java/org/hl7/fhir/validation/testexecutor/TxCacheResourceExtractor.java
```java
      56:   }
      57: 
      58:   private static void makeFileParentDirsIfNotExist(Path filePath) {
      59:     Path parent = filePath.getParent();
      60:     if (!parent.toFile().exists()) {
>>>   61:       parent.toFile().mkdirs();
      62:     }
      63:   }
      64: }
```
